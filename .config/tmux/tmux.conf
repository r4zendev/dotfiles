set -g base-index 1           # start indexing windows at 1 instead of 0
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g escape-time 0          # zero-out escape time delay
set -g history-limit 1000000  # increase history size (from 2,000)
set -g mouse on               # enable mouse support
set -g renumber-windows on    # renumber all windows when any window is closed
set -g set-clipboard on       # use system clipboard
set -g status-interval 2      # update the status bar every 2 seconds
set -g status-position bottom # status bar at the bottom
set -g focus-events on
set -g allow-passthrough on

# set -ga update-environment TERM
# set -ga update-environment TERM_PROGRAM
# set -g default-terminal "${TERM}"
set -g default-terminal "tmux-256color"
set -g default-shell /opt/homebrew/bin/fish
set -g terminal-overrides ",xterm-256color:RGB"

# set -g window-status-current-format '👉#[fg=magenta]#W'
# set -g window-status-format '  #[fg=gray]#W'

# set -g message-command-style bg=default,fg=yellow
# set -g message-style bg=default,fg=yellow
# set -g mode-style bg=default,fg=yellow
# set -g pane-active-border-style 'fg=magenta,bg=default'
# set -g pane-border-style 'fg=brightblack,bg=default'

set -g prefix C-a
unbind C-b
bind-key C-a send-prefix

bind c new-window -c '#{pane_current_path}'
bind 5 select-layout #{window_layout}
bind l split-window -c '#{pane_current_path}' -h
bind k split-window -c '#{pane_current_path}' -v

bind g new-window -c "#{pane_current_path}" -n "🌳" "lazygit 2> /dev/null"
bind b new-window -c "#{pane_current_path}" -n "🐳" "lazydocker 2> /dev/null"

bind n new-session

unbind r
bind r source-file ~/.config/tmux/tmux.conf

bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt (cmd+w)

unbind m
bind -r f resize-pane -Z # full-screen

set -g mouse on

set-window-option -g mode-keys vi

bind v copy-mode
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection
unbind -T copy-mode-vi MouseDragEnd1Pane

# rebind clear screen (prefix + C-l)
unbind C-l
bind C-l send-keys "C-l"

# tpm plugin
set -g @plugin 'tmux-plugins/tpm'

# list of tmux plugins
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart
set -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'

run ~/.config/tmux/plugins/catppuccin/tmux/catppuccin.tmux

# My own implementation for memory usage module
set -g @mem_cmd 'command -v vm_stat >/dev/null 2>&1 && \
  pagesize=$(sysctl -n hw.pagesize) && \
  mem_total=$(sysctl -n hw.memsize | awk "{print \$0/1073741824}") && \
  mem_stats=$(vm_stat) && \
  pages_active=$(echo "$mem_stats" | grep "Pages active" | awk "{print \$3}" | tr -d ".") && \
  pages_wired=$(echo "$mem_stats" | grep "Pages wired down" | awk "{print \$4}" | tr -d ".") && \
  pages_compressed=$(echo "$mem_stats" | grep "Pages occupied by compressor" | awk "{print \$5}" | tr -d ".") && \
  mem_used_gb=$(awk "BEGIN {printf \"%.1f\", ($pages_active + $pages_wired + $pages_compressed) * $pagesize / 1073741824}") && \
  echo "$mem_used_gb/$(printf "%.1f" $mem_total)" || \
  free -g | grep Mem | awk "{printf \"%.1f/%.1f\", \$3, \$2}"'

set -g @sep_left    ''       # Left rounded separator
set -g @mem_icon_bg "#cba6f7" # Purple background for icon
set -g @mem_text_bg "#313244" # Dark background for text
set -g @mem_fg      "#1e1e2e" # Dark text on icon part
set -g @mem_text_fg "#cdd6f4" # Light text on text part
set -g @mem_icon    "󰍛"       # Memory icon

# Memory module
set -g @mem_module "#[fg=#{@mem_icon_bg}]#{@sep_left}#[fg=#{@mem_fg},bg=#{@mem_icon_bg}]#{@mem_icon} #[fg=#{@mem_text_fg},bg=#{@mem_text_bg}] #(eval #{@mem_cmd}) GB "

# Keyboard layout module
set -g @keyboard_cmd '\
LANG=$(defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleCurrentKeyboardLayoutInputSourceID 2>/dev/null | grep -o "[^\.]*$" || echo "EN"); \
if [[ "$LANG" == *"ABC"* || "$LANG" == *"US"* ]]; then \
  echo "EN"; \
elif [[ "$LANG" == *"Russian"* || "$LANG" == *"RU"* ]]; then \
  echo "RU"; \
elif [[ "$LANG" == *"Ukrainian"* || "$LANG" == *"UA"* ]]; then \
  echo "UA"; \
else
  echo "${LANG:0:2}"; \
fi
'

set -g @keyboard_icon_bg "#37ffe6"
set -g @keyboard_text_bg "#313244"
set -g @keyboard_fg      "#1e1e2e"
set -g @keyboard_text_fg "#cdd6f4"
set -g @keyboard_icon    "󰌌"

# set -g @datetime_cmd "echo $(date '+%b %d %H:%M')"
set -g @datetime_cmd "echo $(date '+%H:%M')"
set -g @datetime_icon_bg "#f9e2af" # Yellow background for icon
set -g @datetime_text_bg "#313244" # Dark background for text
set -g @datetime_fg      "#1e1e2e" # Dark text on icon part
set -g @datetime_text_fg "#cdd6f4" # Light text on text part
set -g @datetime_icon    "󰃰"       # Clock icon

set -g @datetime_module "#[bg=#{@datetime_icon_bg}] #[fg=#{@datetime_fg},bg=#{@datetime_icon_bg}]#{@datetime_icon} #[fg=#{@datetime_text_fg},bg=#{@datetime_text_bg}] #(eval #{@datetime_cmd}) "
set -g @keyboard_module "#[bg=#{@keyboard_icon_bg}] #[fg=#{@keyboard_fg},bg=#{@keyboard_icon_bg}]#{@keyboard_icon} #[fg=#{@keyboard_text_fg},bg=#{@keyboard_text_bg}] #(eval #{@keyboard_cmd}) "

# set               -g   automatic-rename-format      '#{b:pane_current_path}'
# set-window-option -g   window-status-format         "                                                                                    #I:      #W                "
# set-window-option -g   window-status-current-format "                                                                                    #I:      #W*               "
set -g   status-right-length 100
set -g   status-left-length  100
set -g   status-left         ""
set -g   status-right        ""
set -ag  status-left         "#{E:@datetime_module}"
# set -ag  status-left         "#{E:@keyboard_module}"
set -ag  status-right        "#{E:@catppuccin_status_application}"
set -agF status-right        "#{E:@catppuccin_status_battery}"
set -agF status-right        "#{E:@catppuccin_status_cpu}"
set -ag  status-right        "#{E:@mem_module}"
set -agF status-right        "#{E:@catppuccin_status_load}"

set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
